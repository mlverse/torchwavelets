% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transform.R
\name{wavelet_transform}
\alias{wavelet_transform}
\title{Temporal filter bank in PyTorch storing a collection of nn.Conv1d filters.}
\usage{
wavelet_transform(
  signal_length,
  dt = 1,
  dj = 0.125,
  wavelet = Morlet$new(),
  unbias = FALSE
)
}
\arguments{
\item{signal_length}{length of the signal to be processed}

\item{dt}{sample spacing, default is 1}

\item{dj}{scale distribution parameter, default is 0.125}

\item{wavelet}{wavelet object}

\item{unbias}{whether to unbias the power spectrum}

\item{x}{`torch_tensor()`, batch of input signals of shape [n_batch,signal_length]}
}
\value{
torch.Variable, batch of outputs of size `[N,N_scales,1/2,T]`
Given a list of temporal 1D filters of variable size, this method
creates a list of `nn_conv1d()` objects that collectively form the filter bank.

a `torch_tensor()`, scalogram for each signal [n_batch,n_scales,signal_length]
}
\description{
Takes a batch of signals and convolves each signal with all elements
in the filter bank. After convolving the entire filter bank, the method returns
a tensor of shape `[N,N_scales,1/2,T]` where the 1/2 number of channels depends
on whether the filter bank is composed of real or complex filters. If the filters
are complex the 2 channels represent `[real, imag]` parts.
}
\details{
When cuda=True, the convolutions are performed on the GPU. If initialized with filters=None,
the set_filters() method has to be called before actual running the convolutions.
}
